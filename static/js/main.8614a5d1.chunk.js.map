{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAiEeA,MA/Df,SAAkBC,GAAO,MAEGC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MACzD,IAHqB,mBAEhBC,EAFgB,KAETC,EAFS,KAKjBC,EAAWC,iBAAO,MAExBC,qBAAU,WAERF,EAASG,QAAQC,WAInB,IAAMC,EAAe,SAAAC,GACnBP,EAASO,EAAEC,OAAOV,QAgBpB,OACE,sBAAMW,UAAU,aAAaC,SAdV,SAAAH,GACnBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACbE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAIRC,EAAS,KAKT,SACGL,EAAME,KACL,qCACA,uBACEoB,KAAK,OACLC,YAAY,SACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,mBACVW,SAAUd,EACVe,IAAKpB,IAEP,wBAAQQ,UAAU,oBAAlB,6BAGF,qCACE,uBACEQ,KAAK,OACLC,YAAY,cACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,cACVW,SAAUd,EACVe,IAAKpB,IAEP,wBAAQQ,UAAU,eAAlB,6B,eCXOa,MAzCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAAc,EACrC9B,mBAAS,CAC/BgB,GAAI,KACJd,MAAO,KAHoD,mBACtDD,EADsD,KAChD8B,EADgD,KAc7D,OAAI9B,EAAKe,GACA,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATV,SAAAZ,GACnB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACNf,GAAI,KACJd,MAAM,QASHyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OAEjB,cADE,CACF,OACErB,UAAWoB,EAAKE,WAAa,oBAAsB,WADrD,UAIA,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGb,sBAAKH,UAAU,QAAf,UACE,cAAC,IAAD,CACAuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEV,cAAC,IAAD,CAAQuB,QAAS,kBAAML,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QAC1DP,UAAU,mBAXPqB,OC8BMG,MAvDf,WAAoB,MAEQrC,mBAAS,IAFjB,mBAEX2B,EAFW,KAEJW,EAFI,KA6ClB,OACE,gCACE,qEACA,oDACA,cAAC,EAAD,CAAUxB,SA5CE,SAAAmB,GACd,GAAKA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAApC,CAKF,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAqCL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAhBL,SAAAZ,GACnB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAK3B,OAJIA,EAAKjB,KAAOA,IAEdiB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETK,EAASG,IAQ2CZ,WAxBnC,SAAAb,GACjB,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAGxDsB,EAASI,IAoBmEZ,WAjC3D,SAACc,EAAQC,GACrBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI5CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCbtDC,MATf,WACE,OACI,qBAAKnC,UAAU,YAAf,SACE,cAAC,EAAD,OCFRoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8614a5d1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm(props) {\n  // array of inputs, create an edit and can see your previous todo\n  const [input, setInput] = useState(props.edit ? props.edit.value\n  : '');\n\n  const inputRef = useRef(null)\n\n  useEffect(() => {\n    // focus on what you put in ref\n    inputRef.current.focus()\n  })\n\n  // handle function\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n  // prevent page from refreshing\n  const handleSubmit = e => {\n    e.preventDefault();\n    // trying not to get the same id\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n\n    // setting the input to invisible\n    setInput('');\n  };\n\n  // create a form\n  return (\n    <form className=\"to-do-form\" onSubmit={handleSubmit}>\n      {props.edit ? (\n        <>\n        <input\n          type='text'\n          placeholder='Update'\n          value={input}\n          name='text'\n          className='to-do-input edit'\n          onChange={handleChange}\n          ref={inputRef}\n        />\n        <button className='to-do-button edit'>Update to-do</button>\n        </>\n      ) : (\n      <>\n        <input\n          type='text'\n          placeholder='Add a to-do'\n          value={input}\n          name='text'\n          className='to-do-input'\n          onChange={handleChange}\n          ref={inputRef}\n        />\n        <button className='to-do-button'>Add to-do</button>\n      </>\n    )}\n</form>\n);\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\n// destructure\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n  });\n\n  const submitUpdate = value => {\n    updateTodo(edit.id, value)\n    setEdit({\n      id: null,\n      value:''\n    })\n  }\n  // if its true then return the todo form\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  // map through the todos pass in todo and index as the parameters\n  return todos.map((todo, index) => (\n    // checking if todo is complete\n  <div\n    className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n    key={index}\n  >\n  <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n      {todo.text}\n    </div>\n    <div className=\"icons\">\n      <RiCloseCircleLine\n      onClick={() => removeTodo(todo.id)}\n      className='delete-icon'\n      />\n      <TiEdit onClick={() => setEdit({ id: todo.id, value: todo.text})}\n      className='edit-icon'/>\n\n      </div>\n    </div>\n  ));\n}\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n  // add state to the todos and set it, pass in an empty array\n  const [todos, setTodos] = useState([]);\n\n  // add todos in the form, doesn't show multiple spacing\n  const addTodo = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n  // new todos equal to an empty array pass in todos\n  const newTodos = [todo, ...todos]\n  // set values to the new todos\n  setTodos(newTodos);\n};\n\n// function to update todo\nconst updateTodo = (todoId, newValue) => {\n  if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n    return;\n  }\n\n  setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\n  );\n};\n// function to remove todo\nconst removeTodo = id => {\n  const removeArr = [...todos].filter(todo => todo.id !== id)\n\n  // checking to see if the todo is in the array, then remove it\n  setTodos(removeArr);\n};\n\n// arrow function for completeTodo\nconst completeTodo = id => {\n  let updatedTodos = todos.map(todo => {\n    if (todo.id === id) {\n      // toggle between true and false\n      todo.isComplete = !todo.isComplete\n    }\n    return todo\n  })\n  setTodos(updatedTodos);\n};\n\n  return (\n    <div>\n      <h1>Welcome to your Daily To-Do Planner</h1>\n      <h2>Plan Your Day Here</h2>\n      <TodoForm onSubmit={addTodo} />\n      <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\n    </div>\n  );\n}\n\nexport default TodoList;\n","import './App.css';\nimport React from 'react'\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n      <div className=\"to-do-app\">\n        <TodoList />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}